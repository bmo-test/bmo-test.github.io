{"version":3,"sources":["components/general/Input/index.js","selectors/restaurants/index.js","reducers/restaurants.js","components/Restaurants/ListItem/index.js","components/Restaurants/index.js","services/restaurants/index.js","utils/services/index.js","actions/restaurants/index.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["Input","props","state","value","onChange","debounce","handleChange","event","target","setState","uniqueId","v4","this","data-testid","className","htmlFor","label","name","type","placeholder","id","React","PureComponent","getRestaurants","createSelector","restaurants","r","defaultState","ACTION_TYPES","memo","area","address","Restaurants","useState","filter","setFilter","city","setCity","error","setError","get","restaurant","found","rProps","length","pop","includes","aria-labelledby","role","c","search","then","catch","err","statusText","map","i","key","mapStateToProps","createStructuredSelector","connect","dispatch","fetch","resource","resp","status","json","services","payload","byCity","App","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.630fae37.chunk.js","sourcesContent":["import React from 'react';\nimport { v4 } from 'uuid';\nimport debounce from 'lodash/debounce';\nimport './index.css'\n\nexport const testId = \"Input\"\nclass Input extends React.PureComponent {\n  constructor(props){\n    super(props);\n    this.state = {\n      value: ''\n    }\n    const onChange = debounce(props.onChange, props.debounce || 500);\n    this.handleChange = (event: Event)=>{\n      const value = event.target.value;\n      onChange(value);\n      this.setState({\n        value,\n      })\n    }\n    this.uniqueId = v4();\n  }\n  render(){\n    const { props } = this;\n    return <div data-testid={testId}>\n    <label className=\"general__input__label\"\n      htmlFor={this.uniqueId}>{props.label || props.name}</label>\n    <input className=\"general__input__input\"\n      type=\"text\" placeholder={props.placeholder || props.name}\n      id={this.uniqueId}\n      name={props.name}\n      onChange={this.handleChange}\n      value={this.state.value} />\n  </div>\n  }\n}\n\nexport default Input;","import { createSelector } from 'reselect';\nexport const getRestaurants = createSelector((state)=>state.restaurants, r=>{\n  return r;\n});","const defaultState = {\n  \n}\nexport const ACTION_TYPES = {\n  BY_CITY: 'BY_CITY',\n}\n\nexport default function (state = defaultState, action){\n  switch(action.type){\n    case ACTION_TYPES.BY_CITY:\n      const {city, restaurants} = action.payload;\n      state[city] = restaurants.map(({name, address, area}) => ({\n        name,\n        address,\n        area\n      }));\n      return {...state};\n    default:\n      return state;\n  }\n}","import React, {memo} from 'react';\nimport './index.css';\n\nexport default memo(function RestaurantListItem(props){\n  return <li className=\"restaurants__list-item__wrapper\">\n    <h2 className=\"restaurants__list-item__h2\">{props.name}</h2><span>, <em>{props.area}</em></span>\n    <p>{props.address}</p>\n  </li>\n});","import React, { useState, memo } from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { get } from 'lodash';\nimport Input from '../general/Input';\nimport * as services from '../../services/restaurants';\nimport { getRestaurants } from '../../selectors/restaurants';\nimport { byCity } from '../../actions/restaurants';\nimport RestaurantListItem from './ListItem';\nimport './index.css';\n\nexport const Restaurants = memo(function Restaurants(props) {\n  const [ filter, setFilter ] = useState('');\n  const [ city, setCity ] = useState('');\n  const [ error, setError ] = useState('');\n  const search = (c)=>{\n    setCity(c);\n    if(c){\n      props.search(c).then(()=>{\n        setError('')\n      })\n      .catch((err)=>{\n        setError(err.statusText);\n      });\n    }\n  }\n  let restaurants = get(props, `restaurants.${city}`, []);\n  if(filter){\n    restaurants = restaurants.filter(restaurant => {\n      const rProps = ['name', 'address', 'area'];\n      let found;\n      while(rProps.length && !found){\n        if(restaurant[rProps.pop()].includes(filter)){\n          found = true;\n        }\n      }\n      return found;\n    })\n  }\n  return (\n    <section className=\"restaurants__wrapper\"  aria-labelledby=\"restaurants__header\">\n      <h1 id=\"restaurants__header\">Restaurants By City</h1>\n      <div role=\"contentinfo\">\n        <p>Search for restaurants by entering a city's name into the city input.Use the refine search to filter out items whose name, address, or area do not match the content in the refine textbox</p>\n      </div>\n      \n      <form>\n        <Input onChange={search} name=\"city\" placeholder=\"Type a city's name here\"/>\n        <Input onChange={setFilter} name=\"refine\" placeholder=\"Refine your search\" />\n      </form>\n      {\n        error && <div role=\"alert\">Error: \n          {error}\n        </div>\n      }\n      <ul className=\"restaurants__ul\">\n        {\n          restaurants.map((restaurant, i) => <RestaurantListItem key={i} {...restaurant}/>)\n        }\n      </ul>\n      {\n        filter && !restaurants.length && <div role=\"alert\">\n        There are no restaurants that match your city and refine criteria.\n      </div>\n      }\n    </section>\n  );\n});\n\nexport const mapStateToProps = createStructuredSelector({\n  restaurants: getRestaurants\n})\n\nexport const mapDispatchToProps = (dispatch)=>({\n  search: (city)=>{\n    return services.byCity(city)\n    .then(({restaurants})=>{\n      dispatch(byCity(city, restaurants));\n    });\n  }\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Restaurants);\n","import { fetch } from 'whatwg-fetch';\nimport { url } from '../../utils/services';\n\nexport function byCity(city){\n  return fetch(url(`restaurants?city=${city}`)).then(resp => {\n    if(resp.status < 300){\n      return resp.json()\n    }\n    throw resp;\n  }).then((json)=>{\n    return json;\n  });\n}","export function url(resource){\n  return ` https://opentable.herokuapp.com/api/${resource}`;\n}","import { ACTION_TYPES } from '../../reducers/restaurants';\n\nexport const byCity = (city, restaurants)=>({\n  type: ACTION_TYPES.BY_CITY,\n  payload: {\n    city,\n    restaurants\n  }\n});","import React from 'react';\nimport Restaurants from './components/Restaurants';\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <div>\n      <header>\n          Frontend Developer Application Test\n      </header>\n      <Restaurants />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport restaurants from './restaurants';\n\nexport default combineReducers({restaurants});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './reducers'\n\nconst store = createStore(\n  reducers,\n  {},\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}